{"remainingRequest":"/Users/jeon-ungjae/Desktop/woong/Coding/Web_project/happyhouse/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jeon-ungjae/Desktop/woong/Coding/Web_project/happyhouse/src/components/house/HouseList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jeon-ungjae/Desktop/woong/Coding/Web_project/happyhouse/src/components/house/HouseList.vue","mtime":1637885291387},{"path":"/Users/jeon-ungjae/Desktop/woong/Coding/Web_project/happyhouse/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeon-ungjae/Desktop/woong/Coding/Web_project/happyhouse/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/jeon-ungjae/Desktop/woong/Coding/Web_project/happyhouse/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeon-ungjae/Desktop/woong/Coding/Web_project/happyhouse/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgSG91c2VMaXN0Um93IGZyb20gIkAvY29tcG9uZW50cy9ob3VzZS9Ib3VzZUxpc3RSb3cudnVlIjsNCmltcG9ydCB7IG1hcFN0YXRlLCBtYXBHZXR0ZXJzIH0gZnJvbSAidnVleCI7DQoNCmNvbnN0IGhvdXNlU3RvcmUgPSAiaG91c2VTdG9yZSI7DQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICJIb3VzZUxpc3QiLA0KICBjb21wb25lbnRzOiB7DQogICAgSG91c2VMaXN0Um93LA0KICB9LA0KICBkYXRhKCkgew0KICAgIHJldHVybiB7DQogICAgICBtYXA6IG51bGwsDQogICAgICBtYXJrZXJzOiBbXSwNCiAgICAgIGdlb2NvZGVyOiBudWxsLA0KICAgICAgaW5mb3dpbmRvdzogbnVsbCwNCiAgICB9Ow0KICB9LA0KICBjb21wdXRlZDogew0KICAgIC4uLm1hcEdldHRlcnMoaG91c2VTdG9yZSwgWyJob3VzZUluZm8iXSksDQogICAgLi4ubWFwU3RhdGUoaG91c2VTdG9yZSwgWyJob3VzZXMiXSksDQogIH0sDQogIHVwZGF0ZWQoKSB7DQogICAgY29uc29sZS5sb2coIm1ha2Ugc3RhcnQiKTsNCiAgICAvLyDsp4Drj4Tsl5Ag7ZGc7Iuc65CY6rOgIOyeiOuKlCDrp4jsu6Trpbwg7KCc6rGw7ZWp64uI64ukDQogICAgaWYgKHRoaXMuaW5mb3dpbmRvdyAhPT0gbnVsbCkgdGhpcy5pbmZvd2luZG93LmNsb3NlKCk7DQogICAgdGhpcy5kaXNwbGF5TWFya2VyKHRoaXMuaG91c2VJbmZvKTsNCg0KICAgIGNvbnNvbGUubG9nKCJtYWtlIGVuZCIpOw0KICB9LA0KICBtb3VudGVkKCkgew0KICAgIGlmICh3aW5kb3cua2FrYW8gJiYgd2luZG93Lmtha2FvLm1hcHMpIHsNCiAgICAgIHRoaXMuaW5pdE1hcCgpOw0KICAgIH0gZWxzZSB7DQogICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsNCiAgICAgIC8qIGdsb2JhbCBrYWthbyAqLw0KICAgICAgc2NyaXB0Lm9ubG9hZCA9ICgpID0+IGtha2FvLm1hcHMubG9hZCh0aGlzLmluaXRNYXApOw0KICAgICAgc2NyaXB0LnNyYyA9DQogICAgICAgICIvL2RhcGkua2FrYW8uY29tL3YyL21hcHMvc2RrLmpzP2F1dG9sb2FkPWZhbHNlJmFwcGtleT02OTkwZWVkNjVlZjFiNzA4MTg3YmQ2MmNlNGYxYWZlNiZsaWJyYXJpZXM9c2VydmljZXMiOw0KICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpOw0KICAgIH0NCiAgfSwNCiAgbWV0aG9kczogew0KICAgIGluaXRNYXAoKSB7DQogICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFwIik7DQogICAgICBjb25zdCBvcHRpb25zID0gew0KICAgICAgICBjZW50ZXI6IG5ldyBrYWthby5tYXBzLkxhdExuZygzNy41NjA3MDc0NjYzNDUzLCAxMjcuMDAwMDYwNjY1MTg1KSwNCiAgICAgICAgbGV2ZWw6IDUsDQogICAgICB9Ow0KICAgICAgdGhpcy5tYXAgPSBuZXcga2FrYW8ubWFwcy5NYXAoY29udGFpbmVyLCBvcHRpb25zKTsNCiAgICAgIHRoaXMuZ2VvY29kZXIgPSBuZXcga2FrYW8ubWFwcy5zZXJ2aWNlcy5HZW9jb2RlcigpOw0KICAgIH0sDQogICAgZGlzcGxheU1hcmtlcihwbGFjZXMpIHsNCiAgICAgIC8vdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOw0KICAgICAgLy8gdmFyIGJvdW5kcyA9IG5ldyBrYWthby5tYXBzLkxhdExuZ0JvdW5kcygpOw0KICAgICAgY29uc29sZS5sb2coInBsYWNlcyDquLjsnbQgOiAiICsgcGxhY2VzLmxlbmd0aCk7DQogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBsYWNlcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAvLyBjb25zb2xlLmxvZygicGxhY2VzIHBvc2l0aW9ucyA6ICIgKyBwbGFjZVBvc2l0aW9uKTsNCiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLw0KICAgICAgICBsZXQgYWRkciA9DQogICAgICAgICAgcGxhY2VzW2ldLnNpZG9OYW1lICsNCiAgICAgICAgICAiICIgKw0KICAgICAgICAgIHBsYWNlc1tpXS5yb2FkTmFtZSArDQogICAgICAgICAgIiAiICsNCiAgICAgICAgICBwYXJzZUludChwbGFjZXNbaV0uYnVpbGRpbmdDb2RlKTsNCg0KICAgICAgICBsZXQgY2FsbGJhY2sgPSAocmVzdWx0LCBzdGF0dXMpID0+IHsNCiAgICAgICAgICAvLyDsoJXsg4HsoIHsnLzroZwg6rKA7IOJ7J20IOyZhOujjOuQkOycvOuptA0KICAgICAgICAgIGxldCBwbGFjZSA9IHBsYWNlc1tpXTsNCiAgICAgICAgICBpZiAoc3RhdHVzID09PSBrYWthby5tYXBzLnNlcnZpY2VzLlN0YXR1cy5PSykgew0KICAgICAgICAgICAgbGV0IHBvc2l0aW9uID0gbmV3IGtha2FvLm1hcHMuTGF0TG5nKHJlc3VsdFswXS55LCByZXN1bHRbMF0ueCk7DQogICAgICAgICAgICBjb25zb2xlLmxvZyhwbGFjZSk7DQogICAgICAgICAgICAvLyBib3VuZHMuZXh0ZW5kKHBvc2l0aW9uKTsNCiAgICAgICAgICAgIGxldCBtYXJrZXIgPSBuZXcga2FrYW8ubWFwcy5NYXJrZXIoew0KICAgICAgICAgICAgICBtYXA6IHRoaXMubWFwLA0KICAgICAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24sDQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKGkpOw0KICAgICAgICAgICAgdGhpcy5pbmZvd2luZG93ID0gbmV3IGtha2FvLm1hcHMuSW5mb1dpbmRvdyh7DQogICAgICAgICAgICAgIGNvbnRlbnQ6IGA8ZGl2IHN0eWxlPSJ3aWR0aDoxNTBweDt0ZXh0LWFsaWduOmNlbnRlcjsiPiR7cmVzdWx0WzBdLnJvYWRfYWRkcmVzcy5idWlsZGluZ19uYW1lfTwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBzdHlsZT0id2lkdGg6MTUwcHg7dGV4dC1hbGlnbjpjZW50ZXI7Ij4ke3Jlc3VsdFswXS5hZGRyZXNzX25hbWV9PC9kaXY+YCwNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgdGhpcy5pbmZvd2luZG93Lm9wZW4odGhpcy5tYXAsIG1hcmtlcik7DQogICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgICAgICAvLyBjb25zb2xlLmxvZyhjYWxsYmFjayk7DQogICAgICAgIC8vIHZhciByZXMgPSB0aGlzLmdlb2NvZGVyLmFkZHJlc3NTZWFyY2goYWRkciwgY2FsbGJhY2spOw0KICAgICAgICAvLyBjb25zb2xlLmxvZygiQEBAIik7DQogICAgICAgIHRoaXMuZ2VvY29kZXIuYWRkcmVzc1NlYXJjaChhZGRyLCBjYWxsYmFjayk7DQogICAgICAgIC8vIGNvbnNvbGUubG9nKGJvdW5kcyk7DQogICAgICAgIC8vIHRoaXMubWFwLnNldEJvdW5kcyhib3VuZHMpOw0KICAgICAgfQ0KICAgIH0sDQogICAgLy8gQWRkTWFya2VyKHBvc2l0aW9uLCBpZHgpIHsNCiAgICAvLyAgIGNvbnNvbGUubG9nKGlkeCk7DQogICAgLy8gICB2YXIgaW1hZ2VTcmMgPQ0KICAgIC8vICAgICAgICJodHRwczovL3QxLmRhdW1jZG4ubmV0L2xvY2FsaW1nL2xvY2FsaW1hZ2VzLzA3L21hcGFwaWRvYy9tYXJrZXJfbnVtYmVyX2JsdWUucG5nIiwgLy8g66eI7LukIOydtOuvuOyngCB1cmwsIOyKpO2UhOudvOydtO2KuCDsnbTrr7jsp4Drpbwg7JSB64uI64ukDQogICAgLy8gICAgIGltYWdlU2l6ZSA9IG5ldyBrYWthby5tYXBzLlNpemUoMzYsIDM3KSwgLy8g66eI7LukIOydtOuvuOyngOydmCDtgazquLANCiAgICAvLyAgICAgaW1nT3B0aW9ucyA9IHsNCiAgICAvLyAgICAgICBzcHJpdGVTaXplOiBuZXcga2FrYW8ubWFwcy5TaXplKDM2LCA2OTEpLCAvLyDsiqTtlITrnbzsnbTtirgg7J2066+47KeA7J2YIO2BrOq4sA0KICAgIC8vICAgICAgIHNwcml0ZU9yaWdpbjogbmV3IGtha2FvLm1hcHMuUG9pbnQoMCwgMSAqIDQ2ICsgMTApLCAvLyDsiqTtlITrnbzsnbTtirgg7J2066+47KeAIOykkSDsgqzsmqntlaAg7JiB7Jet7J2YIOyijOyDgeuLqCDsooztkZwNCiAgICAvLyAgICAgICBvZmZzZXQ6IG5ldyBrYWthby5tYXBzLlBvaW50KDEzLCAzNyksIC8vIOuniOy7pCDsooztkZzsl5Ag7J287LmY7Iuc7YKsIOydtOuvuOyngCDrgrTsl5DshJzsnZgg7KKM7ZGcDQogICAgLy8gICAgIH0sDQogICAgLy8gICAgIG1hcmtlckltYWdlID0gbmV3IGtha2FvLm1hcHMuTWFya2VySW1hZ2UoDQogICAgLy8gICAgICAgaW1hZ2VTcmMsDQogICAgLy8gICAgICAgaW1hZ2VTaXplLA0KICAgIC8vICAgICAgIGltZ09wdGlvbnMNCiAgICAvLyAgICAgKSwNCiAgICAvLyAgICAgbWFya2VyID0gbmV3IGtha2FvLm1hcHMuTWFya2VyKHsNCiAgICAvLyAgICAgICBwb3NpdGlvbjogcG9zaXRpb24sIC8vIOuniOy7pOydmCDsnITsuZgNCiAgICAvLyAgICAgICBpbWFnZTogbWFya2VySW1hZ2UsDQogICAgLy8gICAgIH0pOw0KDQogICAgLy8gICBtYXJrZXIuc2V0TWFwKHRoaXMubWFwKTsgLy8g7KeA64+EIOychOyXkCDrp4jsu6Trpbwg7ZGc7Lac7ZWp64uI64ukDQogICAgLy8gICAvLyB0aGlzLm1hcmtlcnMucHVzaChtYXJrZXIpOyAvLyDrsLDsl7Tsl5Ag7IOd7ISx65CcIOuniOy7pOulvCDstpTqsIDtlanri4jri6QNCiAgICAvLyAgIC8vIGNvbnNvbGUubG9nKHRoaXMubWFya2Vycyk7DQogICAgLy8gfSwNCiAgICByZW1vdmVNYXJrZXIoKSB7DQogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubWFya2Vycy5sZW5ndGg7IGkrKykgew0KICAgICAgICB0aGlzLm1hcmtlcnNbaV0uc2V0TWFwKG51bGwpOw0KICAgICAgfQ0KICAgICAgdGhpcy5tYXJrZXJzID0gW107DQogICAgfSwNCiAgfSwNCn07DQo="},{"version":3,"sources":["HouseList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqfile":"HouseList.vue","sourceRoot":"src/components/house","sourcesContent":["<template>\r\n  <div>\r\n    <b-row>\r\n      <b-container id=\"map\" style=\"width: 100%; height: 500px\"></b-container>\r\n    </b-row>\r\n    <b-container v-if=\"houses\" class=\"bv-example-row mt-3\">\r\n      <house-list-row\r\n        v-for=\"(house, index) in houses\"\r\n        :key=\"index\"\r\n        :house=\"house\"\r\n      />\r\n    </b-container>\r\n    <b-container v-else class=\"bv-example-row mt-3\">\r\n      <b-row>\r\n        <b-col><b-alert show>아파트 목록이 없습니다.</b-alert></b-col>\r\n      </b-row>\r\n    </b-container>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport HouseListRow from \"@/components/house/HouseListRow.vue\";\r\nimport { mapState, mapGetters } from \"vuex\";\r\n\r\nconst houseStore = \"houseStore\";\r\nexport default {\r\n  name: \"HouseList\",\r\n  components: {\r\n    HouseListRow,\r\n  },\r\n  data() {\r\n    return {\r\n      map: null,\r\n      markers: [],\r\n      geocoder: null,\r\n      infowindow: null,\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters(houseStore, [\"houseInfo\"]),\r\n    ...mapState(houseStore, [\"houses\"]),\r\n  },\r\n  updated() {\r\n    console.log(\"make start\");\r\n    // 지도에 표시되고 있는 마커를 제거합니다\r\n    if (this.infowindow !== null) this.infowindow.close();\r\n    this.displayMarker(this.houseInfo);\r\n\r\n    console.log(\"make end\");\r\n  },\r\n  mounted() {\r\n    if (window.kakao && window.kakao.maps) {\r\n      this.initMap();\r\n    } else {\r\n      const script = document.createElement(\"script\");\r\n      /* global kakao */\r\n      script.onload = () => kakao.maps.load(this.initMap);\r\n      script.src =\r\n        \"//dapi.kakao.com/v2/maps/sdk.js?autoload=false&appkey=6990eed65ef1b708187bd62ce4f1afe6&libraries=services\";\r\n      document.head.appendChild(script);\r\n    }\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      const container = document.getElementById(\"map\");\r\n      const options = {\r\n        center: new kakao.maps.LatLng(37.5607074663453, 127.000060665185),\r\n        level: 5,\r\n      };\r\n      this.map = new kakao.maps.Map(container, options);\r\n      this.geocoder = new kakao.maps.services.Geocoder();\r\n    },\r\n    displayMarker(places) {\r\n      //var fragment = document.createDocumentFragment();\r\n      // var bounds = new kakao.maps.LatLngBounds();\r\n      console.log(\"places 길이 : \" + places.length);\r\n      for (let i = 0; i < places.length; i++) {\r\n        // console.log(\"places positions : \" + placePosition);\r\n        ////////////////////////////////////////////////////////////////////////////////////////\r\n        let addr =\r\n          places[i].sidoName +\r\n          \" \" +\r\n          places[i].roadName +\r\n          \" \" +\r\n          parseInt(places[i].buildingCode);\r\n\r\n        let callback = (result, status) => {\r\n          // 정상적으로 검색이 완료됐으면\r\n          let place = places[i];\r\n          if (status === kakao.maps.services.Status.OK) {\r\n            let position = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n            console.log(place);\r\n            // bounds.extend(position);\r\n            let marker = new kakao.maps.Marker({\r\n              map: this.map,\r\n              position: position,\r\n            });\r\n            console.log(i);\r\n            this.infowindow = new kakao.maps.InfoWindow({\r\n              content: `<div style=\"width:150px;text-align:center;\">${result[0].road_address.building_name}</div>\r\n            <div style=\"width:150px;text-align:center;\">${result[0].address_name}</div>`,\r\n            });\r\n            this.infowindow.open(this.map, marker);\r\n          }\r\n        };\r\n        // console.log(callback);\r\n        // var res = this.geocoder.addressSearch(addr, callback);\r\n        // console.log(\"@@@\");\r\n        this.geocoder.addressSearch(addr, callback);\r\n        // console.log(bounds);\r\n        // this.map.setBounds(bounds);\r\n      }\r\n    },\r\n    // AddMarker(position, idx) {\r\n    //   console.log(idx);\r\n    //   var imageSrc =\r\n    //       \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png\", // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n    //     imageSize = new kakao.maps.Size(36, 37), // 마커 이미지의 크기\r\n    //     imgOptions = {\r\n    //       spriteSize: new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\r\n    //       spriteOrigin: new kakao.maps.Point(0, 1 * 46 + 10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n    //       offset: new kakao.maps.Point(13, 37), // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n    //     },\r\n    //     markerImage = new kakao.maps.MarkerImage(\r\n    //       imageSrc,\r\n    //       imageSize,\r\n    //       imgOptions\r\n    //     ),\r\n    //     marker = new kakao.maps.Marker({\r\n    //       position: position, // 마커의 위치\r\n    //       image: markerImage,\r\n    //     });\r\n\r\n    //   marker.setMap(this.map); // 지도 위에 마커를 표출합니다\r\n    //   // this.markers.push(marker); // 배열에 생성된 마커를 추가합니다\r\n    //   // console.log(this.markers);\r\n    // },\r\n    removeMarker() {\r\n      for (let i = 0; i < this.markers.length; i++) {\r\n        this.markers[i].setMap(null);\r\n      }\r\n      this.markers = [];\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#map {\r\n  width: 400px;\r\n  height: 400px;\r\n}\r\n\r\n.button-group {\r\n  margin: 10px 0px;\r\n}\r\n\r\nbutton {\r\n  margin: 0 3px;\r\n}\r\n</style>\r\n"]}]}