{"remainingRequest":"/Users/jeon-ungjae/Desktop/woong/Coding/Web_project/happyhouse/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jeon-ungjae/Desktop/woong/Coding/Web_project/happyhouse/src/components/house/HouseList.vue?vue&type=style&index=0&id=cd347ba2&scoped=true&lang=css&","dependencies":[{"path":"/Users/jeon-ungjae/Desktop/woong/Coding/Web_project/happyhouse/src/components/house/HouseList.vue","mtime":1637885291387},{"path":"/Users/jeon-ungjae/Desktop/woong/Coding/Web_project/happyhouse/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeon-ungjae/Desktop/woong/Coding/Web_project/happyhouse/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/jeon-ungjae/Desktop/woong/Coding/Web_project/happyhouse/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/jeon-ungjae/Desktop/woong/Coding/Web_project/happyhouse/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeon-ungjae/Desktop/woong/Coding/Web_project/happyhouse/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQojbWFwIHsNCiAgd2lkdGg6IDQwMHB4Ow0KICBoZWlnaHQ6IDQwMHB4Ow0KfQ0KDQouYnV0dG9uLWdyb3VwIHsNCiAgbWFyZ2luOiAxMHB4IDBweDsNCn0NCg0KYnV0dG9uIHsNCiAgbWFyZ2luOiAwIDNweDsNCn0NCg=="},{"version":3,"sources":["HouseList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoJA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"HouseList.vue","sourceRoot":"src/components/house","sourcesContent":["<template>\r\n  <div>\r\n    <b-row>\r\n      <b-container id=\"map\" style=\"width: 100%; height: 500px\"></b-container>\r\n    </b-row>\r\n    <b-container v-if=\"houses\" class=\"bv-example-row mt-3\">\r\n      <house-list-row\r\n        v-for=\"(house, index) in houses\"\r\n        :key=\"index\"\r\n        :house=\"house\"\r\n      />\r\n    </b-container>\r\n    <b-container v-else class=\"bv-example-row mt-3\">\r\n      <b-row>\r\n        <b-col><b-alert show>아파트 목록이 없습니다.</b-alert></b-col>\r\n      </b-row>\r\n    </b-container>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport HouseListRow from \"@/components/house/HouseListRow.vue\";\r\nimport { mapState, mapGetters } from \"vuex\";\r\n\r\nconst houseStore = \"houseStore\";\r\nexport default {\r\n  name: \"HouseList\",\r\n  components: {\r\n    HouseListRow,\r\n  },\r\n  data() {\r\n    return {\r\n      map: null,\r\n      markers: [],\r\n      geocoder: null,\r\n      infowindow: null,\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters(houseStore, [\"houseInfo\"]),\r\n    ...mapState(houseStore, [\"houses\"]),\r\n  },\r\n  updated() {\r\n    console.log(\"make start\");\r\n    // 지도에 표시되고 있는 마커를 제거합니다\r\n    if (this.infowindow !== null) this.infowindow.close();\r\n    this.displayMarker(this.houseInfo);\r\n\r\n    console.log(\"make end\");\r\n  },\r\n  mounted() {\r\n    if (window.kakao && window.kakao.maps) {\r\n      this.initMap();\r\n    } else {\r\n      const script = document.createElement(\"script\");\r\n      /* global kakao */\r\n      script.onload = () => kakao.maps.load(this.initMap);\r\n      script.src =\r\n        \"//dapi.kakao.com/v2/maps/sdk.js?autoload=false&appkey=6990eed65ef1b708187bd62ce4f1afe6&libraries=services\";\r\n      document.head.appendChild(script);\r\n    }\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      const container = document.getElementById(\"map\");\r\n      const options = {\r\n        center: new kakao.maps.LatLng(37.5607074663453, 127.000060665185),\r\n        level: 5,\r\n      };\r\n      this.map = new kakao.maps.Map(container, options);\r\n      this.geocoder = new kakao.maps.services.Geocoder();\r\n    },\r\n    displayMarker(places) {\r\n      //var fragment = document.createDocumentFragment();\r\n      // var bounds = new kakao.maps.LatLngBounds();\r\n      console.log(\"places 길이 : \" + places.length);\r\n      for (let i = 0; i < places.length; i++) {\r\n        // console.log(\"places positions : \" + placePosition);\r\n        ////////////////////////////////////////////////////////////////////////////////////////\r\n        let addr =\r\n          places[i].sidoName +\r\n          \" \" +\r\n          places[i].roadName +\r\n          \" \" +\r\n          parseInt(places[i].buildingCode);\r\n\r\n        let callback = (result, status) => {\r\n          // 정상적으로 검색이 완료됐으면\r\n          let place = places[i];\r\n          if (status === kakao.maps.services.Status.OK) {\r\n            let position = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n            console.log(place);\r\n            // bounds.extend(position);\r\n            let marker = new kakao.maps.Marker({\r\n              map: this.map,\r\n              position: position,\r\n            });\r\n            console.log(i);\r\n            this.infowindow = new kakao.maps.InfoWindow({\r\n              content: `<div style=\"width:150px;text-align:center;\">${result[0].road_address.building_name}</div>\r\n            <div style=\"width:150px;text-align:center;\">${result[0].address_name}</div>`,\r\n            });\r\n            this.infowindow.open(this.map, marker);\r\n          }\r\n        };\r\n        // console.log(callback);\r\n        // var res = this.geocoder.addressSearch(addr, callback);\r\n        // console.log(\"@@@\");\r\n        this.geocoder.addressSearch(addr, callback);\r\n        // console.log(bounds);\r\n        // this.map.setBounds(bounds);\r\n      }\r\n    },\r\n    // AddMarker(position, idx) {\r\n    //   console.log(idx);\r\n    //   var imageSrc =\r\n    //       \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png\", // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n    //     imageSize = new kakao.maps.Size(36, 37), // 마커 이미지의 크기\r\n    //     imgOptions = {\r\n    //       spriteSize: new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\r\n    //       spriteOrigin: new kakao.maps.Point(0, 1 * 46 + 10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n    //       offset: new kakao.maps.Point(13, 37), // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n    //     },\r\n    //     markerImage = new kakao.maps.MarkerImage(\r\n    //       imageSrc,\r\n    //       imageSize,\r\n    //       imgOptions\r\n    //     ),\r\n    //     marker = new kakao.maps.Marker({\r\n    //       position: position, // 마커의 위치\r\n    //       image: markerImage,\r\n    //     });\r\n\r\n    //   marker.setMap(this.map); // 지도 위에 마커를 표출합니다\r\n    //   // this.markers.push(marker); // 배열에 생성된 마커를 추가합니다\r\n    //   // console.log(this.markers);\r\n    // },\r\n    removeMarker() {\r\n      for (let i = 0; i < this.markers.length; i++) {\r\n        this.markers[i].setMap(null);\r\n      }\r\n      this.markers = [];\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#map {\r\n  width: 400px;\r\n  height: 400px;\r\n}\r\n\r\n.button-group {\r\n  margin: 10px 0px;\r\n}\r\n\r\nbutton {\r\n  margin: 0 3px;\r\n}\r\n</style>\r\n"]}]}